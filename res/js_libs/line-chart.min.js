var LineChart = {
    defaultConfig: {
        containerClass: "line-chart",
        w: 600,
        h: 600,
        factor: .95,
        factorLegend: 1,
        levels: 3,
        levelTick: !1,
        TickLength: 10,
        maxValue: 0,
        minValue: 0,
        radians: 2 * Math.PI,
        // D3 v7: use scaleOrdinal with schemeCategory10
        color: (typeof d3 !== "undefined" && d3.schemeCategory10) ? d3.scaleOrdinal(d3.schemeCategory10) : function() { return "#000"; },
        axisLine: !0,
        axisText: !0,
        circles: !0,
        radius: 5,
        open: !1,
        backgroundTooltipColor: "#555",
        backgroundTooltipOpacity: "0.7",
        tooltipColor: "white",
        axisJoin: function (a, b) {
            return a.className || b
        },
        tooltipFormatValue: function (a) {
            return a
        },
        tooltipFormatClass: function (a) {
            return a
        },
        transitionDuration: 300
    },
    chart: function () {
        function b(b, c) {
            if (c === !1 || void 0 == c) {
                b.classed("visible", 0);
                b.select("rect").classed("visible", 0);
            } else {
                b.classed("visible", 1);
                var node = b.node();
                // D3 v7: pointer(event, target) instead of mouse
                var d = node && node.parentNode ? node.parentNode : null;
                // Use d3.pointer for D3 v7, fallback to [0,0] if d is null
                var e = d ? d3.pointer ? d3.pointer(event, d) : d3.mouse(d) : [0, 0];
                b.select("text").classed("visible", 1).style("fill", a.tooltipColor);
                var f = 5,
                    textNode = b.select("text").text(c).node(),
                    g = textNode ? textNode.getBBox() : {x:0, y:0, width:40, height:20}; // fallback if null
                b.select("rect").classed("visible", 1)
                    .attr("x", 0)
                    .attr("x", g.x - f)
                    .attr("y", g.y - f)
                    .attr("width", g.width + 2 * f)
                    .attr("height", g.height + 2 * f)
                    .attr("rx", "5")
                    .attr("ry", "5")
                    .style("fill", a.backgroundTooltipColor)
                    .style("opacity", a.backgroundTooltipOpacity);
                b.attr("transform", "translate(" + (e[0] + 10) + "," + (e[1] - 10) + ")");
            }
        }

        function c(c) {
            c.each(function (c) {
                function l(b, c, d, e) {
                    return d = "undefined" != typeof d ? d : 1, c * (1 - d * e(b * a.radians / i))
                }

                function m(a, b, c) {
                    return l(a, b, c, Math.sin)
                }

                function n(a, b, c) {
                    return l(a, b, c, Math.cos)
                }
                var d = d3.select(this),
                    e = d.selectAll("g.tooltip").data([c[0]]),
                    f = e.enter().append("g").classed("tooltip", !0);
                f.append("rect").classed("tooltip", !0), f.append("text").classed("tooltip", !0), c = c.map(function (a) {
                    return a instanceof Array && (a = {
                        axes: a
                    }), a
                });
                var g = Math.max(a.maxValue, d3.max(c, function (a) {
                    return d3.max(a.axes, function (a) {
                        return a.value
                    })
                }));
                g -= a.minValue;
                var h = c[0].axes.map(function (a, b) {
                    return {
                        name: a.axis,
                        xOffset: a.xOffset ? a.xOffset : 0,
                        yOffset: a.yOffset ? a.yOffset : 0
                    }
                }),
                    i = h.length,
                    j = a.factor * Math.min(a.w / 2, a.h / 2),
                    k = Math.min(a.w / 2, a.h / 2);
                d.classed(a.containerClass, 1);
                var o = d3.range(0, a.levels).map(function (b) {
                    return j * ((b + 1) / a.levels)
                }),
                    p = d.selectAll("g.level-group").data(o);
                p = p.join(
                    function(enter) {
                        return enter.append("g");
                    },
                    function(update) { return update; },
                    function(exit) { return exit.remove(); }
                );
                p.attr("class", function (a, b) {
                    return "level-group level-group-" + b
                });
                var q = p.selectAll(".level").data(function (a) {
                    return d3.range(0, i).map(function () {
                        return a
                    })
                });
                q = q.join(
                    function(enter) {
                        return enter.append("line");
                    },
                    function(update) { return update; },
                    function(exit) { return exit.remove(); }
                );
                if (a.levelTick ? q.attr("class", "level").attr("x1", function (b, c) {
                    return j == b ? m(c, b) : m(c, b) + a.TickLength / 2 * Math.cos(c * a.radians / i)
                }).attr("y1", function (b, c) {
                    return j == b ? n(c, b) : n(c, b) - a.TickLength / 2 * Math.sin(c * a.radians / i)
                }).attr("x2", function (b, c) {
                    return j == b ? m(c + 1, b) : m(c, b) - a.TickLength / 2 * Math.cos(c * a.radians / i)
                }).attr("y2", function (b, c) {
                    return j == b ? n(c + 1, b) : n(c, b) + a.TickLength / 2 * Math.sin(c * a.radians / i)
                }).attr("transform", function (b) {
                    return "translate(" + (a.w / 2 - b) + ", " + (a.h / 2 - b) + ")"
                }) : q.attr("class", "level").attr("x1", function (a, b) {
                    return m(b, a)
                }).attr("y1", function (a, b) {
                    return n(b, a)
                }).attr("x2", function (a, b) {
                    return m(b + 1, a)
                }).attr("y2", function (a, b) {
                    return n(b + 1, a)
                }).attr("transform", function (b) {
                    return "translate(" + (a.w / 2 - b) + ", " + (a.h / 2 - b) + ")"
                }), a.axisLine || a.axisText) {
                    var r = d.selectAll(".axis").data(h);
                    r = r.join(
                        function(enter) {
                            var g = enter.append("g");
                            if (a.axisLine) g.append("line");
                            if (a.axisText) g.append("text");
                            return g;
                        },
                        function(update) { return update; },
                        function(exit) { return exit.remove(); }
                    );
                    r.attr("class", "axis");
                    a.axisLine && r.select("line").attr("x1", a.w / 2).attr("y1", a.h / 2).attr("x2", function (b, c) {
                        return a.w / 2 - k + m(c, k, a.factor)
                    }).attr("y2", function (b, c) {
                        return a.h / 2 - k + n(c, k, a.factor)
                    });
                    a.axisText && r.select("text").attr("class", function (a, b) {
                        var c = m(b, .5);
                        return "legend " + (.4 > c ? "left" : c > .6 ? "right" : "middle")
                    }).attr("dy", function (a, b) {
                        var c = n(b, .5);
                        return .1 > c ? "1em" : c > .9 ? "0" : "0.5em"
                    }).text(function (a) {
                        return a.name
                    }).attr("x", function (b, c) {
                        return b.xOffset + (a.w / 2 - k) + m(c, k, a.factorLegend)
                    }).attr("y", function (b, c) {
                        return b.yOffset + (a.h / 2 - k) + n(c, k, a.factorLegend)
                    });
                }
                c.forEach(function (b) {
                    b.axes.forEach(function (b, c) {
                        b.x = a.w / 2 - k + m(c, k, parseFloat(Math.max(b.value - a.minValue, 0)) / g * a.factor), b.y = a.h / 2 - k + n(c, k, parseFloat(Math.max(b.value - a.minValue, 0)) / g * a.factor)
                    })
                });
                var t = d.selectAll(".area").data(c, a.axisJoin),
                    u = "polygon";
                if (a.open) u = "polyline";
                // D3 v7: use .join for enter/update/exit
                t = t.join(
                    function(enter) {
                        return enter.append(u)
                            .classed("area", 1)
                            .classed("d3-enter", 1)
                            .on("mouseover", function(event, c) {
                                if (!event) event = d3.event; // fallback for older d3
                                if (event && event.stopPropagation) event.stopPropagation();
                                d.classed("focus", 1);
                                d3.select(this).classed("focused", 1);
                                b(e, a.tooltipFormatClass(c.className));
                            })
                            .on("mouseout", function(event) {
                                if (!event) event = d3.event;
                                if (event && event.stopPropagation) event.stopPropagation();
                                d.classed("focus", 0);
                                d3.select(this).classed("focused", 0);
                                b(e, !1);
                            });
                    },
                    function(update) { return update; },
                    function(exit) {
                        return exit.classed("d3-exit", 1)
                            .transition().duration(a.transitionDuration)
                            .remove();
                    }
                );
                t.each(function (a, b) {
                    var c = { "d3-exit": 0 };
                    c["line-chart-serie" + b] = 1;
                    if (a.className) c[a.className] = 1;
                    d3.select(this).classed(c);
                })
                .style("stroke", function (b, c) { return a.color(c); })
                .style("fill", function (b, c) { return a.color(c); })
                .transition().duration(a.transitionDuration)
                .attr("points", function (a) {
                    return a.axes.map(function (a) { return [a.x, a.y].join(","); }).join(" ");
                })
                .on("start", function () { d3.select(this).classed("d3-enter", 0); });

                // --- CIRCLES ---
                if (a.circles && a.radius) {
                    var v = d.selectAll("g.circle-group").data(c, a.axisJoin);
                    v = v.join(
                        function(enter) {
                            return enter.append("g")
                                .classed("circle-group", 1)
                                .classed("d3-enter", 1);
                        },
                        function(update) { return update; },
                        function(exit) {
                            return exit.classed("d3-exit", 1)
                                .transition().duration(a.transitionDuration)
                                .remove();
                        }
                    );
                    v.each(function (a) {
                        var b = { "d3-exit": 0 };
                        if (a.className) b[a.className] = 1;
                        d3.select(this).classed(b);
                    })
                    .transition().duration(a.transitionDuration)
                    .on("start", function () { d3.select(this).classed("d3-enter", 0); });

                    var w = v.selectAll(".circle").data(function (a, b) {
                        return a.axes.map(function (a) { return [a, b]; });
                    });
                    w = w.join(
                        function(enter) {
                            return enter.append("circle")
                                .classed("circle", 1)
                                .classed("d3-enter", 1)
                                .on("mouseover", function(event, c) {
                                    if (!event) event = d3.event;
                                    if (event && event.stopPropagation) event.stopPropagation();
                                    b(e, a.tooltipFormatValue(c[0].value));
                                })
                                .on("mouseout", function(event) {
                                    if (!event) event = d3.event;
                                    if (event && event.stopPropagation) event.stopPropagation();
                                    b(e, !1);
                                    d.classed("focus", 0);
                                });
                        },
                        function(update) { return update; },
                        function(exit) {
                            return exit.classed("d3-exit", 1)
                                .transition().duration(a.transitionDuration)
                                .remove();
                        }
                    );
                    w.each(function (a) {
                        var b = { "d3-exit": 0 };
                        b["line-chart-serie" + a[1]] = 1;
                        d3.select(this).classed(b);
                    })
                    .style("fill", function (b) { return a.color(b[1]); })
                    .transition().duration(a.transitionDuration)
                    .attr("r", a.radius)
                    .attr("cx", function (a) { return a[0].x; })
                    .attr("cy", function (a) { return a[0].y; })
                    .on("start", function () { d3.select(this).classed("d3-enter", 0); });

                    // Move to top
                    var x = t.node();
                    if (x && x.parentNode) x.parentNode.appendChild(x);
                    var y = v.node();
                    if (y && y.parentNode) y.parentNode.appendChild(y);
                    var z = e.node();
                    if (z && z.parentNode) z.parentNode.appendChild(z);
                }
            })
        }
        var a = Object.create(LineChart.defaultConfig);
        return c.config = function (b) {
            return arguments.length ? (arguments.length > 1 ? a[arguments[0]] = arguments[1] : Object.entries(b || {}).forEach(function (b) {
                a[b[0]] = b[1]
            }), c) : a
        }, c
    },
    draw: function (a, b, c) {
        var d = LineChart.chart().config(c),
            e = d.config();
        d3.select(a).select("svg").remove(), d3.select(a).append("svg").attr("width", e.w).attr("height", e.h).datum(b).call(d)
    }
};